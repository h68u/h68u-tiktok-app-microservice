// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"h68u-tiktok-app-microservice/service/rpc/user/internal/logic"
	"h68u-tiktok-app-microservice/service/rpc/user/internal/svc"
	"h68u-tiktok-app-microservice/service/rpc/user/types/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) GetUserByName(ctx context.Context, in *user.GetUserByNameRequest) (*user.GetUserReply, error) {
	l := logic.NewGetUserByNameLogic(ctx, s.svcCtx)
	return l.GetUserByName(in)
}

func (s *UserServer) GetUserById(ctx context.Context, in *user.GetUserByIdRequest) (*user.GetUserReply, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) CreateUser(ctx context.Context, in *user.CreateUserRequest) (*user.CreatUserReply, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServer) UpdateUser(ctx context.Context, in *user.UpdateUserRequest) (*user.Empty, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServer) FollowUser(ctx context.Context, in *user.FollowUserRequest) (*user.Empty, error) {
	l := logic.NewFollowUserLogic(ctx, s.svcCtx)
	return l.FollowUser(in)
}

func (s *UserServer) UnFollowUser(ctx context.Context, in *user.UnFollowUserRequest) (*user.Empty, error) {
	l := logic.NewUnFollowUserLogic(ctx, s.svcCtx)
	return l.UnFollowUser(in)
}

func (s *UserServer) GetFollowList(ctx context.Context, in *user.GetFollowListRequest) (*user.GetFollowListReply, error) {
	l := logic.NewGetFollowListLogic(ctx, s.svcCtx)
	return l.GetFollowList(in)
}

func (s *UserServer) GetFansList(ctx context.Context, in *user.GetFansListRequest) (*user.GetFansListReply, error) {
	l := logic.NewGetFansListLogic(ctx, s.svcCtx)
	return l.GetFansList(in)
}

func (s *UserServer) IsFollow(ctx context.Context, in *user.IsFollowRequest) (*user.IsFollowReply, error) {
	l := logic.NewIsFollowLogic(ctx, s.svcCtx)
	return l.IsFollow(in)
}
