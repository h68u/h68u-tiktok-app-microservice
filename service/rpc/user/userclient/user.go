// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"

	"h68u-tiktok-app-microservice/service/rpc/user/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreatUserReply       = user.CreatUserReply
	CreateUserRequest    = user.CreateUserRequest
	Empty                = user.Empty
	FollowUserRequest    = user.FollowUserRequest
	GetFansListReply     = user.GetFansListReply
	GetFansListRequest   = user.GetFansListRequest
	GetFollowListReply   = user.GetFollowListReply
	GetFollowListRequest = user.GetFollowListRequest
	GetUserByIdRequest   = user.GetUserByIdRequest
	GetUserByNameRequest = user.GetUserByNameRequest
	GetUserReply         = user.GetUserReply
	IsFollowReply        = user.IsFollowReply
	IsFollowRequest      = user.IsFollowRequest
	UnFollowUserRequest  = user.UnFollowUserRequest
	UpdateUserRequest    = user.UpdateUserRequest
	UserInfo             = user.UserInfo

	User interface {
		GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserReply, error)
		GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserReply, error)
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreatUserReply, error)
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error)
		FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*Empty, error)
		UnFollowUser(ctx context.Context, in *UnFollowUserRequest, opts ...grpc.CallOption) (*Empty, error)
		GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListReply, error)
		GetFansList(ctx context.Context, in *GetFansListRequest, opts ...grpc.CallOption) (*GetFansListReply, error)
		IsFollow(ctx context.Context, in *IsFollowRequest, opts ...grpc.CallOption) (*IsFollowReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserByName(ctx, in, opts...)
}

func (m *defaultUser) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreatUserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUser) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.FollowUser(ctx, in, opts...)
}

func (m *defaultUser) UnFollowUser(ctx context.Context, in *UnFollowUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UnFollowUser(ctx, in, opts...)
}

func (m *defaultUser) GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetFollowList(ctx, in, opts...)
}

func (m *defaultUser) GetFansList(ctx context.Context, in *GetFansListRequest, opts ...grpc.CallOption) (*GetFansListReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetFansList(ctx, in, opts...)
}

func (m *defaultUser) IsFollow(ctx context.Context, in *IsFollowRequest, opts ...grpc.CallOption) (*IsFollowReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.IsFollow(ctx, in, opts...)
}
